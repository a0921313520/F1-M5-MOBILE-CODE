import React, { Component } from 'react';
import Layout from '@/components/Layout';
import Modal from '@/components/View/Modal';
import SecurityNotice from '@/components/register_login/securityNotice';
import VerifyPhone from '@/components/OTP/VerifyPhone';
import VerifyMail from '@/components/OTP/VerifyMail';
import ChangePwd from '@/components/register_login/ChangePwd';
import { fetchRequest } from '@/server/Request';
import { ApiPort } from '@/api/index';
import Toast from '@/components/View/Toast';
import Router from 'next/router';
import { ReactSVG } from '@/components/View/ReactSVG';
import Service from '@/components/Header/Service';
import ReactIMG from '@/components/View/ReactIMG';
import { ACTION_User_getDetails } from '@/lib/redux/actions/UserInfoAction';
import { setIsLogout, redirectToLogin } from '@/lib/js/util';
import { connect } from 'react-redux';
import { otpServiceActionList } from '@/lib/js/Helper';
class Verify extends React.Component {
	constructor(props) {
		super(props);

		this.state = {
			type: 'loginOTP', //loginOTP, resetpwd
			noiceVisible: false,
			verifyModalVisible: false,
			verifyType: '',
			resetpwdStep: 1,
			memberInfo: {},
			phoneTryLimit: 5,
			mailTryLimit: 5,
			overTheLimitVisible: false,

			phoneCountdownNum: -1,
			phoneShowResendWord: false,

			mailCountdownNum: -1,
			mailShowResendWord: false,
			phoneDisable: false,
			emailDisable: false
		};
	}

	componentDidMount() {
		// let url = location.href;
		// if (url.indexOf('?') != -1) {
		// 	var ary1 = url.split('?')[1].split('&')[0].split('=')[1];
		// 	console.log("üöÄ ~ file: index.js:48 ~ Verify ~ componentDidMount ~ ary1:", ary1)
		// 	if ((ary1 !== '' && ary1 === 'loginOTP') || ary1 === 'resetpwd') {
		// 		this.setState({
		// 			type: ary1
		// 		});
		// 	} else {
		// 		this.setState({
		// 			type: 'loginOTP'
		// 		});
		// 	}
		// }
		const params = new URLSearchParams(window.location.search);
		const type = params.get("type");
		if(type && ["loginOTP","resetpwd"].some((item)=>item === type)){
			this.setState({
				type
			});
		}
		this.props.userInfo_getDetails();
		["loginOTP","resetpwd"].some((item)=>item === type) && this.GetInitialAttempt(type);
	}

	componentWillUnmount() {
		clearInterval(this.mailIntervalNum);
		clearInterval(this.phoneIntervalNum);
	}
	GetInitialAttempt(type) {
		Toast.loading();
		let serviceAction = type === 'resetpwd' ? 'Revalidate' : 'OTP';
		fetchRequest(ApiPort.VerificationAttempt + `channelType=SMS&serviceAction=${serviceAction}&`, 'GET')
		.then((data) => {
			Toast.destroy();
			if (data.isSuccess) {
				if (data.isSuccess) {
					this.setState({
						phoneTryLimit: data.result.attempt
					})
				}
			}
		})
		.catch((err) => {
			Toast.destroy();
		});
		fetchRequest(ApiPort.VerificationAttempt + `channelType=Email&serviceAction=${serviceAction}&`, 'GET')
		.then((data) => {
			Toast.destroy();
			if (data.isSuccess) {
				if (data.isSuccess) {
					this.setState({
						mailTryLimit: data.result.attempt
					})
				}
			}
		})
		.catch((err) => {
			Toast.destroy();
		});
	}

	GetVerificationAttempt =(callback)=> {
		Toast.loading();
		let channelType = this.state.verifyType == 'phone' ? 'SMS' : 'Email';
		let serviceAction = this.state.type == 'loginOTP' ? 'OTP' : 'Revalidate';
		fetchRequest(ApiPort.VerificationAttempt + `channelType=${channelType}&serviceAction=${serviceAction}&`, 'GET')
			.then((data) => {
				Toast.destroy();
				if (data.isSuccess) {
					this.setState({
						phoneTryLimit: data.result.attempt,
						mailTryLimit: data.result.attempt,
						remainingAttempt: data.result.attempt
					});
					if (data.result.attempt == 0) {
						this.setState({
							overTheLimitVisible: true
						});
					}
					else if(this.state.verifyType == 'phone' && data?.result?.attempt){
						typeof callback === "function" && callback(data.result.attempt)
					}
				}
			})
			.catch((err) => {
				Toast.destroy();
			});
	}

	closeModal = () => {
		//console.log('hi');
		this.setState({ noiceVisible: false, verifyType: '' });
	};

	changeVerifyType = () => {
		const {verifyType} = this.state;
		const targetPiwikTitle = verifyType === 'phone' ? "Email" : "Phone"
		this.setState({
			// verifyType: verifyType === 'phone' ? 'mail' : 'phone'
			verifyModalVisible:false
		});
		Pushgtagdata(
			`OTP_Verfication`, 
			`Switch to ${targetPiwikTitle} Verification`, 
			`OTP_Verfication_C_Change_Verification`);
	};

	goChangePwd = () => {
		this.setState({
			resetpwdStep: 2
		});
	};

	closeVerifyModal = () => {
		this.setState({
			verifyModalVisible: false
		});
		this.props.userInfo_getDetails();
	};

	closeOverTheLimitModal = () => {
		this.setState({
			overTheLimitVisible: false,
			verifyModalVisible: false
		});
	};

	initState = () => {
		this.setState({
			verifyModalVisible: false,
			verifyType: '',
			resetpwdStep: 1
		});
	};

	mailTryCalc = () => {
		this.setState(
			(prevState) => {
				return {
					mailTryLimit: --prevState.mailTryLimit
				};
			},
			() => this.checkMailLimit()
		);
	};

	checkPhoneLimit = () => {
		if (this.state.phoneTryLimit === 0) {
			this.closeVerifyModal();
			this.setState({
				overTheLimitVisible: true
			});
		}
	};

	checkMailLimit = () => {
		if (this.state.mailTryLimit === 0) {
			this.closeVerifyModal();
			this.setState({
				overTheLimitVisible: true
			});
		}
	};

	phoneLimitToZero = () => {
		this.setState(
			{
				phoneTryLimit: 0
			},
			this.checkPhoneLimit()
		);
	};

	mailLimitToZero = () => {
		this.setState(
			{
				mailTryLimit: 0
			},
			this.checkMailLimit()
		);
	};

	PopUpLiveChat = () => {
		this.FUN88Live && this.FUN88Live.close();
		this.FUN88Live = window.open(
			'about:blank',
			'chat',
			'toolbar=yes, location=yes, directories=no, status=no, menubar=yes, scrollbars=yes, resizable=no, copyhistory=yes, width=540, height=650'
		);
		fetchRequest(ApiPort.GETLiveChat).then((res) => {
			if (res.isSuccess) {
				localStorage.setItem('serverUrl', res.result);
				this.openServer(res.result);
			}
		});
	};

	openServer = (serverUrl) => {
		this.FUN88Live.document.title = 'FUN88Âú®Á∫øÂÆ¢Êúç';
		this.FUN88Live.location.href = serverUrl;
		this.FUN88Live.focus();
	};

	makeNumInterval = (type) => {
		let countdownNum = 60;
		this[`${type}IntervalNum`] = setInterval(() => {
			//console.log(countdownNum);
			//console.log(this.state);
			if (countdownNum !== 0) {
				countdownNum--;
				this.setState({
					countdownNum
				});
				this.setState({
					[`${type}CountdownNum`]: countdownNum,
				});
			} else {
				this.setState({
					[`${type}CountdownNum`]: -1,
					[`${type}ShowResendWord`]: true
				});
				clearInterval(this[`${type}IntervalNum`]);
			}
		}, 1000);
	};

	limitMax = () => {
		this.setState({overTheLimitVisible: true, verifyModalVisible: false})
	}

	render() {
		const {
			type,
			verifyType,
			noiceVisible,
			resetpwdStep,
			verifyModalVisible,
			overTheLimitVisible,
			phoneTryLimit,
			mailTryLimit,
		} = this.state;
		const { memberInfo } = this.props.userInfo;
		const { Phone, email } = memberInfo;
		return (
			<Layout
				title="FUN88‰πêÂ§©Â†ÇÂÆòÁΩëÔΩú2022Âç°Â°îÂ∞î‰∏ñÁïåÊùØÊúÄ‰Ω≥ÊäïÊ≥®Âπ≥Âè∞"
				Keywords="‰πêÂ§©Â†Ç/FUN88/2022 ‰∏ñÁïåÊùØ/‰∏ñÁïåÊùØÊäïÊ≥®/Âç°Â°îÂ∞î‰∏ñÁïåÊùØ/‰∏ñÁïåÊùØÊ∏∏Êàè/‰∏ñÁïåÊùØÊúÄÊñ∞ËµîÁéá/‰∏ñÁïåÊùØÁ´ûÂΩ©/‰∏ñÁïåÊùØÁ´ûÂΩ©Ë∂≥ÁêÉ/Ë∂≥ÂΩ©‰∏ñÁïåÊùØ/‰∏ñÁïåÊùØË∂≥ÁêÉÁΩë/‰∏ñÁïåÊùØË∂≥ÁêÉËµõ/‰∏ñÁïåÊùØËµåÁêÉ/‰∏ñÁïåÊùØ‰ΩìÂΩ©app"
				Description="‰πêÂ§©Â†ÇÊèê‰æõ2022Âç°Â°îÂ∞î‰∏ñÁïåÊùØÊúÄÊñ∞Ê∂àÊÅØ‰ª•ÂèäÂ§öÊ†∑ÁöÑ‰∏ñÁïåÊùØÊ∏∏ÊàèÔºå‰Ωú‰∏∫13Âπ¥ËµÑÊ∑±ÂìÅÁâåÔºåÂÆâÂÖ®Êúâ‰øùÈöúÁöÑÂìÅÁâåÔºåÂ∞ÜÊòØ‰Ω†‰∏ñÁïåÊùØÊäïÊ≥®ÁöÑ‰∏ç‰∫åÈÄâÊã©„ÄÇ"
				status={0}
			>
				<div className="header-wrapper header-bar" style={{ justifyContent: 'center' }}>
					<span>{type === 'loginOTP' ? 'X√°c Th·ª±c T√†i Kho·∫£n' : 'X√°c Th·ª±c T√†i Kho·∫£n'}</span>
					<div className="header-tools-wrapper">
						<Service />
					</div>
				</div>
				<div className="verify-container">
					<div className="verify__topBox">
						{type === 'resetpwd' && <div className="verify__topBox__title">X√°c Th·ª±c ƒê·ªÉ B·∫£o V·ªá T√†i Kho·∫£n</div>}
						<div className="verify__topBox__content">Vui l√≤ng x√°c th·ª±c th√¥ng tin ƒë·ªÉ ƒë·∫£m b·∫£o t√†i kho·∫£n c·ªßa b·∫°n ƒë∆∞·ª£c an to√†n v√† b·∫£o m·∫≠t th√¥ng tin, ch·ªëng ƒë√°nh c·∫Øp th√¥ng tin v√† gi·∫£m r·ªßi ro khi giao d·ªãch.</div>
						<div className="verify__topBox__btnWrap">
							<button onClick={() => {this.setState({ noiceVisible: true }); Pushgtagdata('Login_Security_Verification', 'Learn more', 'Login_Security_Verification_V_More');}}>T√¨m Hi·ªÉu Th√™m</button>
						</div>
					</div>
					<div className="verify__main">
						{phoneTryLimit != 0 &&
							<div className="verify__main__item">
								<ReactIMG src="/img/verify/phone.png" alt="" />
								<button
									onClick={() => {
										this.setState(
											{
												verifyModalVisible: true,
												verifyType: 'phone'
											},
											() => {
												this.GetVerificationAttempt();
												Pushgtagdata('Login_Security_Verification', 'Select Phone OTP', 'Login_Security_Verification_C_Phone');
											}
										);

										// Pushgtagdata(`Verification`, 'Click', `Phone_LoginOTP`);
									}}
								>
									X√°c Th·ª±c Qua S·ªë ƒêi·ªán Tho·∫°i
								</button>
							</div>
						}
						{mailTryLimit != 0 &&
							<div className="verify__main__item">
								<ReactIMG src="/img/verify/mail.png" alt="" />
								<button
									onClick={() => {
										this.setState(
											{
												verifyModalVisible: true,
												verifyType: 'mail'
											},
											() => {
												this.GetVerificationAttempt();
												Pushgtagdata('Login_Security_Verification', 'Select Email OTP', 'Login_Security_Verification_C_Email');
												
											}
										);
										// Pushgtagdata(`Verification`, 'Click', `Email_LoginOTP`);
									}}
								>
									X√°c Th·ª±c Qua Email
								</button>
							</div>
						}
						{mailTryLimit == 0  && phoneTryLimit == 0 && 
							<div className="verify__main__item">
								<ReactIMG src="/img/verify/cs.png" alt="" />
								<button onClick={this.PopUpLiveChat}>Li√™n H·ªá Live Chat</button>
							</div>
						}

					</div>
					<br />
					<br />
					<br />
					<center
						className="blue"
						onClick={() => {
							Pushgtagdata('Login_Security_Verification', 'Skip Verification', 'Login_Security_Verification_C_Skip');
							// if (process.env.NODE_ENV != 'production') {
							// 	Router.push('/');
							// 	sessionStorage.setItem('skipVerification', true);
							// } else {
								setIsLogout();
								Router.push('/');
							// }
						}}
					>
						X√°c Th·ª±c Sau 
					</center>
				</div>
				<Modal
					className="verify__notice__modal"
					visible={noiceVisible}
					onCancel={this.closeModal}
					closable={false}
					animation={false}
					mask={false}
				>
					<SecurityNotice type={type} onCancel={this.closeModal} />
				</Modal>
				<Modal
					className="verify__notice__modal"
					visible={verifyModalVisible}
					onCancel={this.closeVerifyModal}
					closable={false}
					animation={false}
					mask={false}
				>
					<div className="header-wrapper header-bar">
						{resetpwdStep !== 2 && (
							<ReactSVG className="back-icon" src="/img/svg/LeftArrow.svg" onClick={this.closeVerifyModal} />
						)}

						<span>{resetpwdStep === 1 ? verifyType === 'phone' ? 'X√°c Th·ª±c Qua S·ªë ƒêi·ªán Tho·∫°i' : 'X√°c Th·ª±c Qua Email' : 'ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u'}</span>
						<div className="header-tools-wrapper">
							<Service />
						</div>
					</div>
					{verifyType === 'phone' &&
					resetpwdStep === 1 && (
						<VerifyPhone
							type={type}
							ServiceAction={otpServiceActionList[type]}
							verifyType={verifyType}
							memberInfo={memberInfo}
							phoneNumber={Phone}
							onCancel={this.closeVerifyModal}
							changeVerifyType={this.changeVerifyType}
							goChangePwd={this.goChangePwd}
							phoneTryLimit={this.state.phoneTryLimit}
							phoneTryCalc={this.GetVerificationAttempt}
							limitToZero={this.phoneLimitToZero}
							countdownNum={this.state.phoneCountdownNum}
							isShowResendWord={this.state.phoneShowResendWord}
							makeNumInterval={this.makeNumInterval}
							limitMax={this.limitMax}
							PopUpLiveChat={() => {
								this.PopUpLiveChat();
							}}
							setPhoneAttemptRemaining={(v)=>{this.setState({phoneTryLimit:v})}}
						/>
					)}
					{verifyType === 'mail' &&
					resetpwdStep === 1 && (
						<VerifyMail
							changeVerify={true}
							type={type}
							ServiceAction={otpServiceActionList[type]}
							verifyType={verifyType}
							memberInfo={memberInfo}
							email={email}
							onCancel={this.closeVerifyModal}
							changeVerifyType={this.changeVerifyType}
							goChangePwd={this.goChangePwd}
							mailTryLimit={this.state.mailTryLimit}
							mailTryCalc={this.mailTryCalc}
							limitToZero={this.mailLimitToZero}
							countdownNum={this.state.mailCountdownNum}
							isShowResendWord={this.state.mailShowResendWord}
							makeNumInterval={this.makeNumInterval}
							limitMax={this.limitMax}
							PopUpLiveChat={() => {
								this.PopUpLiveChat();
							}}
							RouterUrl={'/'}
							setEmailAttemptRemaining={(v)=>this.setState({EmailTryLimit:v})}
						/>
					)}
					{resetpwdStep === 2 && (
						<ChangePwd
							type={type}
							verifyType={verifyType}
							memberInfo={memberInfo}
							onCancel={this.initState}
							changeVerifyType={this.changeVerifyType}
						/>
					)}
				</Modal>

				<Modal
					className="verify__notice__modal"
					visible={overTheLimitVisible}
					onCancel={this.closeOverTheLimitModal}
					closable={false}
					animation={false}
					mask={false}
				>
					<div className="header-wrapper header-bar">
						{resetpwdStep !== 2 && (
							<ReactSVG
								className="back-icon"
								src="/img/svg/LeftArrow.svg"
								onClick={this.closeOverTheLimitModal}
							/>
						)}

						<span>X√°c Th·ª±c Qua S·ªë ƒêi·ªán Tho·∫°i</span>
						<div className="header-tools-wrapper">
							<Service />
						</div>
					</div>
					<div className="verify__overTime">
						<ReactIMG src="/img/verify/warn.png" />
						<div className="verify__overTime__title">B·∫°n ƒê√£ V∆∞·ª£t Qu√° S·ªë L·∫ßn X√°c Th·ª±c Cho Ph√©p</div>
						<div className="verify__overTime__desc">B·∫°n ƒë√£ v∆∞·ª£t qu√° 5 l·∫ßn x√°c th·ª±c cho ph√©p. Vui l√≤ng th·ª≠ l·∫°i sau 24 gi·ªù ho·∫∑c li√™n h·ªá 
							<span
								className="underline_a"
								onClick={() => {
									this.PopUpLiveChat();
								}}
								>
								&nbsp;Live Chat
							</span>
						</div>
						{/* <div className="footerBtn">
							<Button
								size="large"
								type="primary"
                                className="whitebtn"
								onClick={() => {
									this.setState({
										overTheLimitVisible: false
									});
								}}
							>
								ÂÖ≥Èó≠
							</Button>
							<Button
								size="large"
								type="primary"
								onClick={() => {
									this.PopUpLiveChat();
								}}
							>
								ËÅîÁ≥ªÂÆ¢Êúç
							</Button>
						</div> */}
					</div>
				</Modal>
			</Layout>
		);
	}
}

const mapStateToProps = (state) => ({
	userInfo: state.userInfo
});

const mapDispatchToProps = {
	userInfo_getDetails: () => ACTION_User_getDetails()
};

export default connect(mapStateToProps, mapDispatchToProps)(Verify);
